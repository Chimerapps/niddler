plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

dependencies {
    provided 'com.squareup.okhttp3:okhttp:3.4.2'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

android {
    compileSdkVersion 23
    buildToolsVersion "24.0.3"

    defaultConfig {
        consumerProguardFiles 'proguard-rules.txt'
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.getSrcDirs()
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.getSrcDirs()
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'maven'
        name = 'niddler-noop'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/icapps/niddler'

        version {
            name = "$ARTIFACT_VERSION"
            desc = "Niddler network inspector library - NOOP"
            released = new Date()
        }
    }
    publications = ['MyPublication']
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Nicola Verbeeck"
            email "nicola@chimerapps.com"
            organization "Chimerapps"
        }
        developer {
            name "Maarten Van Giel"
            email "contact@maarten.vg"
            organization "iCapps"
        }
    }
}

publishing {
    repositories {
        maven {
            url "s3://icappsmaven/release"
            credentials(AwsCredentials) {
                accessKey rootProject.ext.awsKey
                secretKey rootProject.ext.awsSecretKey
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId "$ARTIFACT_PACKAGE"
            version "$ARTIFACT_VERSION"
            artifactId "$ARTIFACT_NAME"
            artifact("$buildDir/outputs/aar/niddler-lib-noop-release.aar")
            artifact sourceJar {
                classifier "sources"
            }
            artifact androidJavadocsJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it instanceof ExternalModuleDependency) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
        MyPublication(MavenPublication) {
            artifact("$buildDir/outputs/aar/niddler-lib-noop-release.aar")
            artifact sourceJar {
                classifier "sources"
            }
            artifact androidJavadocsJar
            groupId "$ARTIFACT_PACKAGE"
            version "$ARTIFACT_VERSION"
            artifactId "$ARTIFACT_NAME"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Niddler network inspector library - NOOP')
                root.appendNode('name', 'niddler')
                root.appendNode('url', 'https://github.com/icapps/niddler')
                root.children().last() + pomConfig

                def dependenciesNode = root.appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it instanceof ExternalModuleDependency) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
